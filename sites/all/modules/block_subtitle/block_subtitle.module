<?php

/**
 * @file
 * Enhanced control over the CSS ides of any Block.
 *
 * Block Class allows users to add ides to any block through the block's
 * configuration interface. This implementation is based on an alteration of
 * the Core block database table to leverage the Core Block API functions,
 * objects and structure.
 */

/**
 * Implements hook_permission().
 */
function block_subtitle_permission() {
  return array(
    'administer block ides' => array(
      'title' => t('Administer block subtitle'),
      'description' => t('Set subtitle for blocks.'),
    ),
  );
}

/**
 * Implements theme_preprocess_block().
 *
 * Extend block's ides with any user defined ides.
 
function block_subtitle_preprocess_block(&$vars) {
  $block = $vars['block'];
  if (isset($block->block_subtitle) && $block->block_subtitle != '') {
    $vars['subtitle_array'] = array_merge($vars['subtitle_array'], explode(' ', $block->block_subtitle));
  }
}
*/
/**
 * Implements hook_preprocess_HOOK().
 *
 * Extend panel block's ides with any user defined ides.
 */
function block_subtitle_preprocess_panels_pane(&$vars) {
  if ($vars['pane']->type != 'block') {
    return;
  }
  // Infer the block's $module and $delta from the pane subtype.
  $block_parts = explode('-', $vars['pane']->subtype);
  // Load the block based on the block parts.
  $block = block_load($block_parts[0], $block_parts[1]);
  // Add a generic 'module type' pane class.
  $vars['subtitle_array'][] = drupal_html_class('pane-' . $block->module);
  // Add $block_subtitle to the $subtitle_array.
  if (isset($block->block_subtitle) && $block->block_subtitle != '') {
    $vars['subtitle_array'] = array_merge($vars['subtitle_array'], explode(' ', $block->block_subtitle));
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter block edit form to add configuration field.
 */
function block_subtitle_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer block ides') && ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form')) {
    // Load statically cached block object used to display the form.
    $block = block_load($form['module']['#value'], $form['delta']['#value']);

    $form['settings']['block_subtitle'] = array(
      '#type' => 'textfield',
      '#title' => t('Block subtitle'),
      '#default_value' => isset($block->block_subtitle) ? $block->block_subtitle : '',
      '#description' => t('Add subtitle to block .'),
      '#maxlength' => 255,
    );

    $form['#submit'][] = 'block_subtitle_form_submit';
  }
}

/**
 * Helper function: additional submit callback for block configuration pages.
 *
 * Save supplied CSS ides.
 */
function block_subtitle_form_submit($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') {
    // Only save if value has changed.
    if (isset($form_state['values']['block_subtitle']) && $form['settings']['block_subtitle']['#default_value'] != $form_state['values']['block_subtitle'] && user_access('administer blocks')) {
      db_update('block')
        ->fields(array('block_subtitle' => $form_state['values']['block_subtitle']))
        ->condition('module', $form_state['values']['module'])
        ->condition('delta', $form_state['values']['delta'])
        ->execute();
      // Flush all context module cache to use the updated block_subtitle.
      if (module_exists('context')) {
        cache_clear_all('context', 'cache', TRUE);
      }
    }
  }
}
